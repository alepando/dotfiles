#+TITLE: Emacs cheatsheet
#+AUTHOR: Thibault Polge

This is my Emacs cheatsheet. It is quite basic, and will probably
remain this way, or become quite weird.

Unless otherwise stated, all cited packages are available on MELPA.

* Getting help

Emacs is extensively documented. Knowing the help commands is therefore vital:

 * =C-h= is the entry point to all Emacs documentation. =C-h ?= prints available options.

 * A prefix followed by =C-h= shows available bindings. This is
   especially useful since knowing the name of a command, even if you
   already know what it does, allows to find similar/related commands
   (and ultimately their binding with ~where-is~, see below)
 
 * =C-h c= followed by a key chord prints the command this combination is bound to.

 * The ~where-is~ command takes another command and prints the associated key bindings. It is bound to =C-h w=.

 * The ~apropos~ command searches the documentation for a given pattern.

* Key sequences

| Abreviation | Modifier | Usual binding |
|-------------+----------+---------------|
| =C=         | Ctrl     | Ctrl          |
| =M=         | Meta     | Alt           |
| =S=         | Shift    | Shift         |
| =s=         | Super    |               |
| =h=         | Hyper    |               |

Emacs has some unusual customs:

 * What Emacs calls /Del/ is the *Backspace* key.

* Editing text

** Command multipliers

| Keys                   | Command              | Action                                                                                            |
|------------------------+----------------------+---------------------------------------------------------------------------------------------------|
| =C--=, =M--=           | ~negative-argument~  | Reverse direction of following command.                                                           |
| =C-[0-9]+=, =M-[0-9]+= | ~digit-argument~     | Repeat the following command n times.                                                             |
| =C-u=                  | ~universal-argument~ | Repeat the following command 4 times (may be followed by a number; multiplies itself if repeated) |

** Moving around

*** Common commands

| Keys    | Command     | Unit      | Direction                 |
|---------+-------------+-----------+---------------------------|
| =C-f=   |             | Character | Forward                   |
| =C-b=   |             | Character | Backward                  |
| =M-f=   |             | Word      | Forward                   |
| =M-b=   |             | Word      | Backward                  |
| =C-n=   |             | Line      | Forward                   |
| =C-p=   |             | Line      | Backward                  |
| =C-a=   |             | Line      | Start                     |
| =C-e=   |             | Line      | End                       |
| =M-a=   |             | Sentence  | Start                     |
| =M-e=   |             | Sentence  | End                       |
| =M-<=   |             | Buffer    | Start                     |
| =M->=   |             | Buffer    | End                       |

 * *avy* provides motion commands based on a decision tree. 

*** Uncommon commands

| Keys    | Command     | Unit      | Direction                |
|---------+-------------+-----------+--------------------------|
| =M-g c= | ~goto-char~ | Character | Go to nth char in buffer |

** Killing and yanking

*** Killing

Killing is deleting text. Deleted text is always added to the kill ring.

| Keys      | Command                   | Kills                  |
|-----------+---------------------------+------------------------|
| =C-d=     | ~delete-char~             | Character under cursor |
| =Del=     | ~delete-backward-char~    | Previous character     |
| =M-d=     | ~kill-word~               | Next word              |
| =M-del=   | ~backward-kill-word~      | Previous word          |
| =C-k=     | ~kill-line~               | To end of line         |
| =M-k=     | ~kill-sentence~           | Next sentence          |
| =C-x Del= | ~backward-kill-sentence~  | Previous sentence      |
| =C-w=     | ~kill-region~             | Marked region          |
|           | ~kill-paragraph~          | Next paragraph         |
|           | ~backward-kill-paragraph~ | Previous paragraph     |

*** Saving to kill-ring (copying)

| Keys  | Command         | Saves |
|-------+-----------------+-------|
| =M-w= | ~kill-ring-save | Region |

*** Yanking

*Slang:* In Vim, /yanking/ means cut, in Emacs it means *paste*.

| Keys  | Command    | Action                                            |
|-------+------------+---------------------------------------------------|
| =C-y= | ~yank~     | Yanks latest entry in kill ring                   |
| =M-y= | ~yank-pop~ | Immediately after ~yank~, pastes earlier deletion |

** Marks and regions

Once the mark has been set, usual motion commands extend the selection.

| Keys             | Command                   | Action                             |
|------------------+---------------------------+------------------------------------|
| =C-space=, =C-@= | ~set-mark-command~        | Mark the beginning/end of a region |
| =C-x C-x=        | ~exchange-point-and-mark~ | Exchange the point and the mark    |
| =M-h=            | ~mark-paragraph~          | Mark paragraph                     |
| =C-x C-p=        | ~mark-page~               | Mark page                          |
| =C-x h=          | ~mark-whole-buffer~       | Mark buffer                        |

** Undoing and redoing

EMacs maintains undo history as a tree, and considers undo as a regular operation

| Keys           | Command         | Action                  |
|----------------+-----------------+-------------------------|
| =C-_-, =C-x u= | ~undo~          | Undo last change        |
|                | ~revert-buffer~ | Revert to saved version |

 * *git-timemachine* provides an interface for browsing a file's Git history.

** Editing goodies

*** Transposition

| Keys      | Command                |
|-----------+------------------------|
| =C-t=     | ~transpose-chars~      |
| =M-t=     | ~transpose-words~      |
| =C-x C-t= | ~transpose-lines~      |
|           | ~transpose-sentences~  |
|           | ~transpose-paragraphs~ |

*** Capitalization

| Keys  | Command           |
|-------+-------------------|
| =M-c= | ~capitalize-word~ |
| =M-u= | ~upcase-word~     |
| =M-l= | ~downcase-word~   |

All these commands may be prefixed by the negative argument to work on
previous word or, more usefully, from the beginning of the word if the
point is somewhere in the middle.

* Searching and replacing

** Searching

| Keys        | Command                   | Mode        | Object                | Direction |
|-------------+---------------------------+-------------+-----------------------+-----------|
| =C-s=       | ~isearch-forward~         | Incremental | String                | Forward   |
| =C-r=       | ~isearch-backward~        | Incremental | String                | Backward  |
| =C-s C-w=   | ~isearch-yank-word~       | Incremental | Word under cursor     | Forward   |
| =C-s C-y=   | ~isearch-yank-line~       | Incremental | Cursor to end of line | Forward   |
| =C-s M-y=   | ~isearch-yank-kill~       | Incremental | Top of kill ring      | Forward   |
| =C-s C-s=   | ~isearch-repeat-forward~  | Incremental | Previous search       | Forward   |
| =C-s C-r=   | ~isearch-repeat-backward~ | Incremental | Previous search       | Backward  |
| =C-M-s=     | ~isearch-forward-regexp~  | Incremental | Regular expression    | Forward   |
| =C-M-r=     | ~isearch-backward-regexp~ | Incremental | Regular expression    | Backward  |
| =M-s w=     | ~isearch-forward-word~    | Incremental | Word                  | Forward   |

 * At a search prompt, =Enter= without a search string disables incremental search.

 * *Word search* looks for a sequence of words and ignores line
   breaks, spaces, and in some major modes (Org and maybe others) formatting.

 * *Anzu* highlights search results and print a count in mode line.

*** Commands in incremental search

| Keys    | Command        | Action      |
|---------+----------------+-------------|
| =Enter= | ~isearch-exit~ | Exit search |

** Replacing

| Keys    | Command                | Type               | Direction |
|---------+------------------------+--------------------+-----------|
| =M-%=   | ~query-replace~        | String             | Forward   |
| =C-M-%= | ~query-replace-regexp~ | Regular expression | Forward   |

*** Commands in replacement mode

| Keys         | Action                                                  |
|--------------+---------------------------------------------------------|
| =Space=, =y= | Replace one match                                       |
| =Del=, =n=   | Skip to next match                                      |
| =N=          | Skip to next buffer without replacing remaining matches |
| =Enter=, =q= | Exit search                                             |
| =.=          | Replace one match and exit                              |
| ,            | Replace but stay on match                               |
| =C-r=        | Enter recursive edit                                    |
| =C-w=        | Delete match and recursive edit                         |
| =!=          | Replace all                                             |
| =Y=          | Replace all in all buffers                              |
| =^=          | Go back to previous match                               |
| =E=          | Edit replacement string                                 |

* Macros

| Keys            | Command                      | Action                                                                                                             |
|-----------------+------------------------------+--------------------------------------------------------------------------------------------------------------------|
| =C-x (=, =<f3>= | ~kmacro-start-macro~         | Starts recording a keyboard macro                                                                                  |
| =C-x )=, =<f4>= | ~kmacro-end-macro~           | Stops recording a keyboard macro                                                                                   |
| =C-x e=, =<f4>= | ~kmacro-end-and-call-macro~  | Run the macro                                                                                                      |
| =C-x C-k r=     | ~apply-macro-to-region-line~ | For each complete line between point and mark, move to the beginning of the line, and run the last keyboard macro. |
|                 |                              |                                                                                                                    |

=C-x e= may be prefixed by a multiplier with the value 0 (=C-0 C-x e=)
to repeat the macro an infinite number a times, that is, until the
first error or end of buffer. Execution can still be aborted with =Ctrl-G=.
 
* Windows, frames and buffers

*Slang:* A /frame/ is what graphical OSes refer to as a /window/, a
/window/ is an internal Emacs frame. This is in fact surprisingly
logical: Since Emacs /is/ itself a tiling Window manager, it deals
with windows, and put them into frames. Everything is clear when you
don't forget that Emacs keeps pretending it's an OS.

A buffer is basically text, not necessarily related to a file
(anything that can be displayed in a window is a buffer, including
=*Messages*=, the scratch buffer, dired directory trees, etc. Buffers
and windows associations are very loose compared to modern text
editors. Especially, hiding/showing a buffer has no effect on the
buffer itself: hidden buffers remain open and available until
explicitely closed.

** Windows

** Frames

** Buffers

| Keys    | Command       | Action        |
|---------+---------------+---------------|
| =C-x k= | ~kill-buffer~ | Kill a buffer |

* Excellent packages

** Vim emulation/modal editing.

Some packages extend Emacs functionnality with Vim-like modal
editing. Modal editing reduces the need for modifiers, and thus
reduces risks of injury.

  * *evil* is the Extensible VI Layer for Emacs. It provides almost
    perfect Vim behavior for text editing, including ex emulation. It
    emulates all of vim modes.
  * *god-mode* is a minor-mode similar to Vim's normal mode. It allows
    to enter commands without modifier keys. Typing a key in god mode
    is equivalent to entering =C-key=. =g= replaces meta, and =G=
    stands for =C-M=. =C-g= must be entered as is. God mode is usally
    bound to Esc. 
  * *viper* is a previous incarnation of Vim emulation in Emacs, and
    should be considered deprecated.

** Learning helpers

  * *discover-my-major* 
  * *guru-mode* disables arrow motions and other bad keybindings and
    prints the correct binding.

** Programming/Emacs as IDE.

  * *company* is an extensible completion framework. It can interface
    with multiple backends. It also allows to use YouCompleteMe daemon
    (ycmd).
  * *flycheck* is a framework for on-the-fly checking and/or linting
    of source code. Like company, it connects to backends which does
    the actual work, and deals with integrating them in 
  * *helm-dash* allows to browse [[https://kapeli.com/dash][Dash]] docsets directly from
    Emacs. Helm-dash extends the functionality of Helm, which is an
    excellent fuzzy finder framework.

* Writing environments 

** LaTeX

    *AucTex* is likely to be the best TeX editing environment
    ever.  

** Org mode
* Astonishing slang

Emacs is built around Lisp, and although that makes it amazingly
extensible, it also comes with its boatload of weird jargon and
strange habits. Here's a bit of it.

A *defun* is a function or its equivalent in /any/ language which has
a notion of functions.

A *s-expression* is any kind of balanced expression, surrounded by any
concevable pair of stuff which goes (by pair, including) parentheses,
brackets or accolades. `forward-sexp' is faaar from being restricted
to Lisp's s-expressions.
