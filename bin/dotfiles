#!/usr/bin/python
# -*- coding: utf-8 -*-

###############################
# Yet another dotfiles script #
###############################

import argparse, platform, os, re, sys

_DFROOT_ENV_VAR = "DOTFILES_DIR"
_DFRC = ".dfrc"

def verbose(msg):
	print(msg)

def notice(msg):
	print("{0}".format(msg))

def say(msg):
	print(msg)

def fatal(msg):
	print("\033[91m{0}".format(msg))

def find_dfroot(default=None):

	# Attempt 1: -d parameter

	if default:
		if not os.path.isdir(default):
			print("“{0}” doesn't exist, isn't a directory or can't be read.".format(default))
			return None
		else:
			return default

	# Attempt 2: Using environment variable

	candidate = os.environ.get(_DFROOT_ENV_VAR)
	if candidate:
		candidate = os.path.expanduser(os.environ[_DFROOT_ENV_VAR])
		if not os.path.isabs(candidate):
			candidate = os.path.expanduser(os.path.join("~", candidate))
			print("Relative path found in environment variable {envvar}, converted to “{dir}”.".format(envvar=_DFROOT_ENV_VAR, dir=candidate))
		if os.path.isdir(candidate):
			return candidate
		else:
			print("Path specified by environment variable {envvar}: “{dir}” doesn't exist or isn't a directory. Skipping.".format(envvar=_DFROOT_ENV_VAR, dir=candidate))

	# Attempt 3: In ~ using a regular expression

	dnre = re.compile("^\.?dot[^a-zA-Z]?files$", re.IGNORECASE)
	home = os.path.expanduser("~")

	candidates = list()

	for f in os.listdir(home):
		canonical = os.path.join(home, f)
		if os.path.isdir(canonical) and dnre.match(f):
			candidates.append(canonical)

	if len(candidates) > 1:
		print("More than one candidate directory!")
		print("Can't choose a dotfiles directory between {0} and {1}.".format(", ".join(candidates[0:-1]), candidates[-1]))
		return None
	elif len(candidates) == 1:
		return candidates[0]
	return None

class FSNode(object):

	pool = set()

	def __init__(self, source=None, target=None, parent=None):
		self.__source = source
		self.__target = target if target else ( parent.__target if parent else None )
		self.__parent = parent

		self.is_dir = os.path.isdir(source)

		if self.is_dir:
			self.__children = set()
			for child in os.path.listdir(source):
				
			self.__children = None

		FSNode.pool.add(self)

	def link(self, force=False):
		pass

	def unlink(self):
		pass

	def is_linked(self):
		pass

	def __repr__(self):
		return "{0}: {1} => {2}".format(self.__class__, self.__source, self.__target)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Synchronize dotfiles.')

	subparsers = parser.add_subparsers(help='Commands', metavar="command", dest="cmd")
	parser.add_argument('-d', dest='dfroot', metavar="dir", action='store', nargs=1, help="directory where dotfiles are stored", default=[None])

	parser_sync = subparsers.add_parser("sync", help="synchronize dotfiles")
	parser_add = subparsers.add_parser("add", help="add files or directories to the repository")
	parser_remove = subparsers.add_parser("remove", help="stop tracking files or repositories")
	parser_list = subparsers.add_parser("list", help="print synchronization status")

	args = parser.parse_args()

	dfroot = find_dfroot(args.dfroot[0])
	target = os.path.expanduser("~")
	if dfroot:
		notice("Working with \"{0}\" syncing with \"{1}\".".format(dfroot, target))
	else:
		fatal("Can't determine location of source directory. Please pass it with -d PATH or set the {0} environment variable.".format(_DFROOT_ENV_VAR))

	pf = platform.system() # We need this for conditional deployment.

	filesystem = FSNode(dfroot, target)

	for node in FSNode.pool: print(node)
