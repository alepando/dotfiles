#!/usr/bin/env python3

# "Fix" git remotes in git repositories
# so that push always use ssh, pull https
# This will (of course) break on servers that
# doesn't support both protocols, and is perfectly
# useless unless the server allows unauthenticated
# fetch over https.

# Takes remote names as optional parameters. If none are
# provided, works on everything.

# Usage example:
# git-fix-remotes
# git-fix-remotes origin my-remote 

from re import compile
from subprocess import run, PIPE
from sys import argv

# The regexes are quite basic. They should work
# for all (my) setups 
splitter = compile(r"([-\w]+)\t(.+)\s\((\w+)\)")
userrep_ssh = compile(r"([\w]+)@([-.\w]+):([-\w]+)/([-\w]+)")
userrep_https = compile(r"https://(.+)/([\w]+)/([\w]+)")

remotes = run(["git", "remote", "-v"], stdout=PIPE, timeout=10, universal_newlines=True).stdout.split("\n")
remotes = [splitter.match(r) for r in remotes if r]

remotes = { r.groups()[0]: { s.groups()[2]: s.groups()[1] for s in remotes if s.groups()[0] == r.groups()[0] } for r in remotes}

def is_https(path):
    return path.startswith("https://")

def ssh_user(host):
    # A fascinating function indeed!
    # I assume some hosting providers may have a different ssh
    # username. If such evil occurs, it will be taken care of
    # in this very place, with a well put if clause.
    return "git"

def https2ssh(path):
    # Takes an https url, and returns a ssh url. Or tries to.
    d = userrep_https.match(path).groups()
    return "{ssh_user}@{host}:{user}/{repo}".format(
        ssh_user = ssh_user(d[0]),
        host = d[0],
        user = d[1],
        repo = d[2])
        

def ssh2https(path):
    # Takes a ssh url, and returns an https url. Or tries to.
    d = userrep_ssh.match(path).groups()
    return "https://{host}/{user}/{repo}".format(
        host=d[1],
        user=d[2],
        repo=d[3])

def set_remote(name, url, push=False):
    command = [word for word in ["git", "remote", "set-url", "--push" if push else "", name, url] if word]
    print(" ".join(command))
    run(command)

for name in argv[1:] if len(argv) > 1 else remotes.keys():
    # The lines below are weird, but order matters here.
    # I'm not sure git *guarantees* the order protocols
    # are displayed with git remote -v, and we must modify
    # fetch *before* push, because changing fetch also
    # changes push.  Therefore, we can't do
    # `for protocol, url in remotes[name].items()` 
    for protocol in ["fetch", "push"]:
        url = remotes[name][protocol]
        if protocol=="fetch" and not is_https(url):
            new = ssh2https(url)
            set_remote(name, new, False)
            urls["push"] = new
            
        elif protocol=="push" and is_https(url):
            set_remote(name, https2ssh(url), True)    
