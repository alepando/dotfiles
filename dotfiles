#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse, sys, os, re

_DFROOT_ENV_VAR = "DOTFILES_DIR"

# Initialize argument parser

parser = argparse.ArgumentParser(description='Synchronize dotfiles.')

subparsers = parser.add_subparsers(help='Commands', metavar="command", dest="cmd")
parser.add_argument('-d', dest='dfroot', metavar="dir", action='store', nargs=1, help="directory where dotfiles are stored")

parser_sync = subparsers.add_parser("sync", help="synchronize dotfiles")
parser_add = subparsers.add_parser("add", help="add files or directories to the repository")
parser_remove = subparsers.add_parser("remove", help="stop tracking files or repositories")
parser_list = subparsers.add_parser("list", help="print synchronization status")

args = parser.parse_args()

# Identify dotfiles directory

dfroot = None

# Attempt 1: -d parameter

if args.dfroot:
	dfroot = args.dfroot[0]
	if not os.path.isdir(dfroot):
		print("“{0}” doesn't exist, isn't a directory or can't be read.".format(dfroot))
		exit(-1)

# Attempt 2: Using environment variable

candidate = os.environ.get(_DFROOT_ENV_VAR)
if candidate:
	candidate = os.path.expanduser(os.environ[_DFROOT_ENV_VAR])
	if not os.path.isabs(candidate):
		candidate = os.path.expanduser(os.path.join("~", candidate))
		print("Relative path found in environment variable {envvar}, converted to “{dir}”.".format(envvar=_DFROOT_ENV_VAR, dir=candidate))
	if os.path.isdir(candidate):
		dfroot = candidate
	else:
		print("Path specified by environment variable {envvar}: “{dir}” doesn't exist or isn't a directory. Skipping.".format(envvar=_DFROOT_ENV_VAR, dir=candidate))

# Attempt 3: In ~ using a regular expression

if not dfroot:
	dnre = re.compile("^\.?dot[^a-zA-Z]?files$", re.IGNORECASE)
	home = os.path.expanduser("~")

	candidates = list()

	for f in os.listdir(home):
		canonical = os.path.join(home, f)
		if os.path.isdir(canonical) and dnre.match(f):
			candidates.append(canonical)

	if len(candidates) > 1:
		print("More than one candidate directory!")
		print("Can't choose a dotfiles directory between {0} and {1}.".format(", ".join(candidates[0:-1]), candidates[-1]))
	elif len(candidates) == 1:
		dfroot = candidates[0]

if dfroot:
	print("Using {0}".format(dfroot))
else:
	print("Unable to determine dotfiles directory. Set DOTFILES_DIR environment variable or use -d switch.")
	exit(-1)

# Either we have a directory or we've exit()ed.

class FSNode(object):
	def __init__(self, source=None, target=None, parent=None):
		self.__source = dfroot
		self.__target  = troot
		self.__parent = parent

	def link(self, path):
		pass


	def unlink(self, path):
		pass

	def is_linked(self, path):
		pass
