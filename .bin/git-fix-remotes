#!/usr/bin/env python3

# "Fix" git remotes in git repositories
# so that push always use ssh, pull https
# This will (of course) break on servers that
# doesn't support both protocols, and is perfectly
# useless unless the server allows unauthenticated
# fetch over https.

# Takes remote names as optional parameters. If none are
# provided, works on everything.

# Usage example:
# git-fix-remotes
# git-fix-remotes origin my-remote

import re
from subprocess import run, PIPE
from sys import argv
from urllib.parse import urlparse

# The regexes are quite basic. They should work
# for all (my) setups

splitter = re.compile(r"([-\w]+)\t(.+)\s\((\w+)\)")

def get_remotes():
    remotes = run(["git", "remote", "-v"], stdout=PIPE, timeout=10, universal_newlines=True).stdout.split("\n")
    remotes = [splitter.match(r) for r in remotes if r]

    remotes = { r.groups()[0]: { s.groups()[2]: s.groups()[1] for s in remotes if s.groups()[0] == r.groups()[0] } for r in remotes}
    return remotes

def https2ssh(url):
    # Takes an https url, and returns a ssh url. Or tries to.
    return "ssh://git@{netloc}:{path}.git".format(netloc = url.netloc, path=url.path)

def ssh2https(url):
    # Takes a ssh url, and returns an https url. Or tries to.
    path = url.path[:-4] if url.path.endswith(".git") else url.path
    netloc = url.netloc[url.netloc.index("@")+1:] if "@" in url.netloc else url.netloc
    return "https://{netloc}{path}".format(netloc=netloc, path=path)

def set_remote(name, url, push=False):
    command = [word for word in ["git", "remote", "set-url", "--push" if push else "", name, url] if word]
    print(" ".join(command))

    run(command)

remotes = get_remotes()
for name in argv[1:] if len(argv) > 1 else remotes.keys():
    # The lines below are weird, but order matters here.
    # I'm not sure git *guarantees* the order protocols
    # are displayed with git remote -v, and we must modify
    # fetch *before* push, because changing fetch also
    # changes push.  Therefore, we can't do
    # `for protocol, url in remotes[name].items()`
    for protocol in ["fetch", "push"]:
        url = urlparse(remotes[name][protocol])
        if not url.netloc:
            print("Skipping {0} ({1}): can't understand URL {2}.  This may be a git-style ssh URL.".format(name, protocol, remotes[name][protocol]))
        if protocol=="fetch" and not "https" == url.scheme:
            new = ssh2https(url)
            remotes = get_remotes()

        elif protocol=="push" and "https" == url.scheme:
            set_remote(name, https2ssh(url), True)
